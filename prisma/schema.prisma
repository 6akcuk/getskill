// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["nativeTypes"]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum UserVerificationType {
  PHONE
  EMAIL
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  phone            String?            @unique
  role             Role               @default(USER)
  isEmailVerified  Boolean            @default(false)
  isPhoneVerified  Boolean            @default(false)
  vkontakteId      String?            @unique
  profile          Profile?
  UserToken        UserToken[]
  VideoLesson      VideoLesson[]
  UserVerification UserVerification[]
}

model UserToken {
  id       Int     @id @default(autoincrement())
  token    String // @db.Text
  deviceId String
  ip       Int
  isValid  Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
}

model UserVerification {
  userId    Int                  @id
  type      UserVerificationType
  code      String
  attempts  Int                  @default(0)
  times     Int                  @default(1)
  createdAt DateTime
  user      User                 @relation(fields: [userId], references: [id])
}

model Profile {
  id         Int     @id @default(autoincrement())
  publicName String
  avatar     Json?
  about      String? // @db.Text
  contacts   Json?
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
}

model VideoLesson {
  id             Int              @id @default(autoincrement())
  userId         Int
  isDraft        Boolean          @default(true)
  isUploaded     Boolean          @default(false)
  isReady        Boolean          @default(false)
  duration       Int              @default(0)
  name           String
  poster         String?
  publicId       String?
  version        Int?
  uploadUrl      String?
  description    String?
  tags           Tag[]
  user           User             @relation(fields: [userId], references: [id])
  createdAt      DateTime
  ServicesToTags ServicesToTags[]
}

enum TagType {
  SKILL
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String
  type           TagType
  VideoLesson    VideoLesson?     @relation(fields: [videoLessonId], references: [id])
  videoLessonId  Int?
  ServicesToTags ServicesToTags[]
}

model ServicesToTags {
  tagId       Int
  tag         Tag    @relation(fields: [tagId], references: [id])
  serviceId   Int
  serviceName String

  videoLessonId Int
  videoLesson   VideoLesson @relation(fields: [videoLessonId], references: [id])

  @@id([tagId, serviceId, serviceName])
}
