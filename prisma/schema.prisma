// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes"]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum UserVerificationBy {
  phone
  email
}

enum UserVerificationType {
  phone
  email
  forgot_password
}

model User {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  password        String
  phone           String?            @unique
  role            Role               @default(USER)
  isEmailVerified Boolean            @default(false)
  isPhoneVerified Boolean            @default(false)
  vkontakteId     String?            @unique
  profile         Profile?
  UserToken       UserToken[]
  VideoLesson     VideoLesson[]
  verifications   UserVerification[]
  specialist      Specialist?
  Video           Video[]
}

model UserToken {
  id       Int     @id @default(autoincrement())
  token    String  @db.Text
  deviceId String
  ip       Int
  isValid  Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
}

model UserVerification {
  userId    Int
  by        UserVerificationBy   @default(phone)
  type      UserVerificationType
  code      String
  attempts  Int                  @default(0)
  times     Int                  @default(1)
  createdAt DateTime
  user      User                 @relation(fields: [userId], references: [id])

  @@unique([userId, by, type])
}

model Profile {
  id         Int     @id @default(autoincrement())
  publicName String
  avatar     Json?
  about      String? @db.Text
  contacts   Json?

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Specialist {
  id     Int @id @default(autoincrement())
  scores Int @default(0)

  user                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  tags                   ServicesToTags[]
  SpecialistScoreHistory SpecialistScoreHistory[]
}

model SpecialistScoreHistory {
  id        Int      @id @default(autoincrement())
  amount    Int
  reason    String
  createdAt DateTime @default(now())

  specialist   Specialist @relation(fields: [specialistId], references: [id])
  specialistId Int
}

model Video {
  id         Int      @id @default(autoincrement())
  ownerId    Int
  isUploaded Boolean  @default(false)
  isReady    Boolean  @default(false)
  duration   Int      @default(0)
  filename   String
  signedUrl  String   @db.MediumText
  serviceId  String?
  preview    String?
  createdAt  DateTime @default(now())

  owner       User          @relation(fields: [ownerId], references: [id])
  VideoLesson VideoLesson[]
}

model VideoLesson {
  id          Int      @id @default(autoincrement())
  userId      Int
  videoId     Int
  name        String
  poster      String?
  description String?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime

  video Video            @relation(fields: [videoId], references: [id])
  tags  ServicesToTags[]
}

enum TagType {
  SKILL
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String
  type           TagType
  ServicesToTags ServicesToTags[]
}

model ServicesToTags {
  tagId       Int
  tag         Tag    @relation(fields: [tagId], references: [id])
  serviceId   Int
  serviceName String

  specialistId Int?
  specialist   Specialist? @relation(fields: [specialistId], references: [id])

  videoLessonId Int?
  videoLesson   VideoLesson? @relation(fields: [videoLessonId], references: [id])

  @@id([tagId, serviceId, serviceName])
}
